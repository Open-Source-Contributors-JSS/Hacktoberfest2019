#include <bits/stdc++.h> 
using namespace std;   
#define P 4  
#define INF 99999  
  
void SOLUTION(int D[][P]);   
void FLOYDWARSHALL (int graph[][P])  
{  
    int D[P][P], i, j, k;  
    for (i = 0; i < P; i++)  
        for (j = 0; j < P; j++)  
            D[i][j] = graph[i][j];  
    for (k = 0; k < P; k++)  
    {    
        for (i = 0; i < P; i++)  
        {  
            for (j = 0; j < P; j++)  
            {   
                if (D[i][k] + D[k][j] < D[i][j])  
                    D[i][j] = D[i][k] + D[k][j];  
            }  
        }  
    }  
    SOLUTION(D);  
}  
void SOLUTION(int D[][P])  
{  
    cout<<"The following matrix shows the shortest Dances between epery pair of pertices \n";  
    for (int i = 0; i < P; i++)  
    {  
        for (int j = 0; j < P; j++)  
        {  
            if (D[i][j] == INF)  
                cout<<"INF"<<"     ";  
            else
                cout<<D[i][j]<<"     ";  
        }  
        cout<<endl;  
    }  
}   
int main()  
{  
    int graph[P][P] = { {0, 5, INF, 10},  
                        {INF, 0, 3, INF},  
                        {INF, INF, 0, 1},  
                        {INF, INF, INF, 0}  
                    };   
    FLOYDWARSHALL(graph);  
    return 0;  
}  
